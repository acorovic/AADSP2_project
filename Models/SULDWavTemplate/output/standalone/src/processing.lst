1     	 0000					.extern _centralOutput
2     	 0000					.extern _input_distortion
3     	 0000					.extern _leftInput
4     	 0000					.extern _lfeOutput
5     	 0000					.extern _lsOutput
6     	 0000					.extern _numGain
7     	 0000					.extern _outputMode
8     	 0000					.extern _output_distortion
9     	 0000					.extern _rightInput
10    	 0000					.extern _rsOutput
11    	 0000					.extern _sampleBuffer
12    	 0000					.extern _distortion
13    	 0000					.public _processing
14    							.code_ovly
14     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
15    						
16    						
17    						
18    	 0000				switch_0:			/* LN: 27 | CYCLE: 0 | RULES: () */ 
19    	 0000				_processing:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
20    	 0000	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 24 | 
21    	 0001	 B0440000		xmem[_leftInput + 0] = i0			# LN: 24 | 
22    	 0002	 A0050000		i0 = (0) + (_sampleBuffer + 16)			# LN: 25 | 
23    	 0003	 B0440000		xmem[_rightInput + 0] = i0			# LN: 25 | 
24    	 0004	 88040000		a0 = xmem[_outputMode + 0]			# LN: 27 | 
25    	 0005	 00004E80		a0 & a0			# LN: 27 | 
26    	 0006	 84080010		if (a == 0) jmp (case_0)			# LN: 27 | 
27    	 0007	 88040000		a0 = xmem[_outputMode + 0]			# LN: 27 | 
28    	 0008	 894A0001		uhalfword(a1) = (0x1)			# LN: 27 | 
29    	 0009	 00004F08		a0 - a1			# LN: 27 | 
30    	 000A	 84080021		if (a == 0) jmp (case_1)			# LN: 27 | 
31    	 000B	 88040000		a0 = xmem[_outputMode + 0]			# LN: 27 | 
32    	 000C	 894A0002		uhalfword(a1) = (0x2)			# LN: 27 | 
33    	 000D	 00004F08		a0 - a1			# LN: 27 | 
34    	 000E	 84080044		if (a == 0) jmp (case_2)			# LN: 27 | 
35    	 000F	 80080081		jmp (__epilogue_108)			# LN: 27 | 
36    	 0010				case_0:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
37    	 0010	 84840000		y0 = ymem[_numGain + 0]
38    							
39    	 0011	 B8040000		i4 = xmem[_leftInput + 0]			# LN: 32 | 
40    	 0012	 B9040000		i5 = xmem[_rightInput + 0]
41    							
42    	 0013	 8100001F		do (0x10), label_end_92			# LN: 30 | 
43    	 0014				label_begin_92:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
44    							#i0 = xmem[_leftInput + 0]			# LN: 32 | 
45    							
46    							// address where to store result of multiply
47    	 0014	 A1050000		i1 = (0) + (_leftInput)			# LN: 32 | 
48    	 0015	 81140004		x1 = xmem[i4]			# LN: 32 | 
49    	 0016	 B8140001		i4 = xmem[i1]			# LN: 32 | 
50    							
51    	 0017	 00002480		a0 = x1 * y0			# LN: 32 | 
52    	 0018	 88540014		xmem[i4] = a0; i4 += 1			# LN: 32 | 
53    							#i0 = xmem[_rightInput + 0]			# LN: 33 | 
54    							
55    							// address where to store result of multiply 
56    	 0019	 A1050000		i1 = (0) + (_rightInput)			# LN: 33 | 
57    	 001A	 81140005		x1 = xmem[i5]			# LN: 33 | 
58    							
59    	 001B	 B9140001		i5 = xmem[i1]; 		# LN: 33 | 
60    	 001C	 00002480		a0 = x1 * y0			# LN: 33 | 
61    	 001D	 88540015		xmem[i5] = a0; i5 += 1		# LN: 33 | 
62    							#i0 = xmem[_leftInput + 0]			# LN: 34 | 
63    							#nop #empty cycle
64    							#i4 += 1			# LN: 34 | 
65    	 001E	 B8440000		xmem[_leftInput + 0] = i4			# LN: 34 | 
66    							#i0 = xmem[_rightInput + 0]			# LN: 35 | 
67    							#nop #empty cycle
68    							#i5 += 1			# LN: 35 | 
69    	 001F				label_end_92:			# LN: 30 | CYCLE: 21 | RULES: ()
70    	 001F	 B9440000		xmem[_rightInput + 0] = i5			# LN: 35 | 
71    	 0020				for_end_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
72    	 0020	 80080081		jmp (__epilogue_108)			# LN: 37 | 
73    	 0021				case_1:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
74    	 0021	 A0050000		i0 = (0) + (_sampleBuffer + 32)			# LN: 40 | 
75    	 0022	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 40 | 
76    	 0023	 A0050000		i0 = (0) + (_sampleBuffer + 48)			# LN: 41 | 
77    	 0024	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 41 | 
78    							
79    	 0025	 84840000		y0 = ymem[_numGain + 0]
80    							
81    	 0026	 B8040000		i4 = xmem[_leftInput + 0]			# LN: 32 | 
82    	 0027	 B9040000		i5 = xmem[_rightInput + 0]
83    							
84    	 0028	 81000034		do (0x10), label_end_93			# LN: 43 | 
85    	 0029				label_begin_93:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
86    							#i0 = xmem[_leftInput + 0]			# LN: 32 | 
87    							
88    							// address where to store result of multiply
89    	 0029	 A1050000		i1 = (0) + (_leftInput)			# LN: 32 | 
90    	 002A	 81140004		x1 = xmem[i4]			# LN: 32 | 
91    	 002B	 B8140001		i4 = xmem[i1]			# LN: 32 | 
92    							
93    	 002C	 00002480		a0 = x1 * y0			# LN: 32 | 
94    	 002D	 88540014		xmem[i4] = a0; i4 += 1			# LN: 32 | 
95    							#i0 = xmem[_rightInput + 0]			# LN: 33 | 
96    							
97    							// address where to store result of multiply 
98    	 002E	 A1050000		i1 = (0) + (_rightInput)			# LN: 33 | 
99    	 002F	 81140005		x1 = xmem[i5]			# LN: 33 | 
100   							
101   	 0030	 B9140001		i5 = xmem[i1]; 		# LN: 33 | 
102   	 0031	 00002480		a0 = x1 * y0			# LN: 33 | 
103   	 0032	 88540015		xmem[i5] = a0; i5 += 1		# LN: 33 | 
104   							#i0 = xmem[_leftInput + 0]			# LN: 34 | 
105   							#nop #empty cycle
106   							#i4 += 1			# LN: 34 | 
107   	 0033	 B8440000		xmem[_leftInput + 0] = i4			# LN: 34 | 
108   							#i0 = xmem[_rightInput + 0]			# LN: 35 | 
109   							#nop #empty cycle
110   							#i5 += 1			# LN: 35 | 
111   	 0034				label_end_93:			# LN: 43 | CYCLE: 21 | RULES: ()
112   	 0034	 B9440000		xmem[_rightInput + 0] = i5			# LN: 48 | 
113   	 0035				for_end_1:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
114   	 0035	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 51 | 
115   	 0036	 B0440000		xmem[_leftInput + 0] = i0			# LN: 51 | 
116   	 0037	 A0050000		i0 = (0) + (_sampleBuffer + 16)			# LN: 52 | 
117   	 0038	 B0440000		xmem[_rightInput + 0] = i0			# LN: 52 | 
118   	 0039	 88040000		a0 = xmem[_leftInput + 0]			# LN: 54 | 
119   	 003A	 88440000		xmem[_input_distortion + 0] = a0			# LN: 54 | 
120   	 003B	 88040000		a0 = xmem[_lsOutput + 0]			# LN: 55 | 
121   	 003C	 88440000		xmem[_output_distortion + 0] = a0			# LN: 55 | 
122   	 003D	 80880000		call (_distortion)			# LN: 56 | 
123   	 003E	 88040000		a0 = xmem[_rightInput + 0]			# LN: 58 | 
124   	 003F	 88440000		xmem[_input_distortion + 0] = a0			# LN: 58 | 
125   	 0040	 88040000		a0 = xmem[_rsOutput + 0]			# LN: 59 | 
126   	 0041	 88440000		xmem[_output_distortion + 0] = a0			# LN: 59 | 
127   	 0042	 80880000		call (_distortion)			# LN: 60 | 
128   	 0043	 80080081		jmp (__epilogue_108)			# LN: 62 | 
129   	 0044				case_2:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
130   	 0044	 A0050000	i0 = (0) + (_sampleBuffer + 32)			# LN: 65 | 
131   	 0045	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 65 | 
132   	 0046	 A0050000		i0 = (0) + (_sampleBuffer + 48)			# LN: 66 | 
133   	 0047	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 66 | 
134   	 0048	 A0050000		i0 = (0) + (_sampleBuffer + 64)			# LN: 67 | 
135   	 0049	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 67 | 
136   	 004A	 A0050000		i0 = (0) + (_sampleBuffer + 80)			# LN: 68 | 
137   	 004B	 B0440000		xmem[_lfeOutput + 0] = i0			# LN: 68 | 
138   							
139   	 004C	 84840000		y0 = ymem[_numGain + 0]
140   							
141   	 004D	 B8040000		i4 = xmem[_leftInput + 0]			# LN: 32 | 
142   	 004E	 B9040000		i5 = xmem[_rightInput + 0]
143   							
144   	 004F	 81000064		do (0x10), label_end_94			# LN: 70 | 
145   	 0050				label_begin_94:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
146   							#i0 = xmem[_leftInput + 0]			# LN: 32 | 
147   							
148   							// address where to store result of multiply
149   	 0050	 A1050000		i1 = (0) + (_leftInput)			# LN: 32 | 
150   	 0051	 81140004		x1 = xmem[i4]			# LN: 32 | 
151   	 0052	 B8140001		i4 = xmem[i1]			# LN: 32 | 
152   							
153   	 0053	 00002480		a0 = x1 * y0			# LN: 32 | 
154   	 0054	 88540004		xmem[i4] = a0; #i4 += 1			# LN: 32 | 
155   							#i0 = xmem[_rightInput + 0]			# LN: 33 | 
156   							
157   							// address where to store result of multiply 
158   	 0055	 A1050000		i1 = (0) + (_rightInput)			# LN: 33 | 
159   	 0056	 81140005		x1 = xmem[i5]			# LN: 33 | 
160   							
161   	 0057	 B9140001		i5 = xmem[i1]; 		# LN: 33 | 
162   	 0058	 00002480		a0 = x1 * y0			# LN: 33 | 
163   	 0059	 88540005		xmem[i5] = a0; #i5 += 1		# LN: 33 | 
164   							#i0 = xmem[_rightInput + 0]			# LN: 74 | 
165   							#i1 = xmem[_leftInput + 0]			# LN: 74 | 
166   	 005A	 88140014		a0 = xmem[i4]; i4 += 1			# LN: 74 | 
167   	 005B	 89140015		a1 = xmem[i5]; i5 += 1;			# LN: 74 | 
168   	 005C	 A0050000		i0 = (0) + (_centralOutput)			# LN: 74 | 
169   	 005D	 B0140000		i0 = xmem[i0]			# LN: 74 | 
170   	 005E	 00004408		a0 = a0 + a1			# LN: 74 | 
171   	 005F	 98540000		xmem[i0] = a0h			# LN: 74 | 
172   	 0060	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 75 | 
173   							#nop #empty cycle
174   	 0061	 B8440000		xmem[_leftInput + 0] = i4	
175   	 0062	 02087FFF		i0 += 1			# LN: 75 | 
176   	 0063	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 75 | 
177   							#i0 = xmem[_leftInput + 0]			# LN: 76 | 
178   							#nop #empty cycle
179   									# LN: 76 | 
180   									# LN: 76 | 
181   							#i0 = xmem[_rightInput + 0]			# LN: 77 | 
182   							#nop #empty cycle
183   							#i5 += 1			# LN: 77 | 
184   	 0064				label_end_94:			# LN: 70 | CYCLE: 33 | RULES: ()
185   	 0064	 B9440000		xmem[_rightInput + 0] = i5			# LN: 77 | 
186   	 0065				for_end_2:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
187   	 0065	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 81 | 
188   	 0066	 B0440000		xmem[_leftInput + 0] = i0			# LN: 81 | 
189   	 0067	 A0050000		i0 = (0) + (_sampleBuffer + 16)			# LN: 82 | 
190   	 0068	 B0440000		xmem[_rightInput + 0] = i0			# LN: 82 | 
191   	 0069	 88040000		a0 = xmem[_leftInput + 0]			# LN: 84 | 
192   	 006A	 88440000		xmem[_input_distortion + 0] = a0			# LN: 84 | 
193   	 006B	 88040000		a0 = xmem[_lsOutput + 0]			# LN: 85 | 
194   	 006C	 88440000		xmem[_output_distortion + 0] = a0			# LN: 85 | 
195   	 006D	 80880000		call (_distortion)			# LN: 86 | 
196   	 006E	 88040000		a0 = xmem[_rightInput + 0]			# LN: 88 | 
197   	 006F	 88440000		xmem[_input_distortion + 0] = a0			# LN: 88 | 
198   	 0070	 88040000		a0 = xmem[_rsOutput + 0]			# LN: 89 | 
199   	 0071	 88440000		xmem[_output_distortion + 0] = a0			# LN: 89 | 
200   	 0072	 80880000		call (_distortion)			# LN: 90 | 
201   							
202   	 0073	 B8040000		i4 = xmem[_lsOutput + 0]			# LN: 32 | 
203   	 0074	 B9040000		i5 = xmem[_rsOutput + 0]
204   							
205   	 0075	 81000080		do (0x10), label_end_95			# LN: 92 | 
206   	 0076				label_begin_95:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
207   							#i0 = xmem[_lsOutput + 0]			# LN: 94 | 
208   							#i1 = xmem[_rsOutput + 0]			# LN: 94 | 
209   	 0076	 88140014		a0 = xmem[i4]; i4 += 1			# LN: 94 | 
210   	 0077	 89140015		a1 = xmem[i5]; i5 += 1			# LN: 94 | 
211   	 0078	 A0050000		i0 = (0) + (_lfeOutput)			# LN: 94 | 
212   	 0079	 B0140000		i0 = xmem[i0]			# LN: 94 | 
213   	 007A	 00004408		a0 = a0 + a1			# LN: 94 | 
214   	 007B	 88540000		xmem[i0] = a0			# LN: 94 | 
215   	 007C	 B0040000		i0 = xmem[_lfeOutput + 0]			# LN: 95 | 
216   	 007D	 B8440000		xmem[_lsOutput + 0] = i4
217   	 007E	 02087FFF		i0 += 1			# LN: 95 | 
218   	 007F	 B0440000		xmem[_lfeOutput + 0] = i0			# LN: 95 | 
219   							#i0 = xmem[_lsOutput + 0]			# LN: 96 | 
220   							#nop #empty cycle
221   							#i4 += 1			# LN: 96 | 
222   									# LN: 96 | 
223   							#i0 = xmem[_rsOutput + 0]			# LN: 97 | 
224   							#nop #empty cycle
225   							#i5 += 1			# LN: 97 | 
226   	 0080				label_end_95:			# LN: 92 | CYCLE: 19 | RULES: ()
227   	 0080	 B9440000		xmem[_rsOutput + 0] = i5			# LN: 97 | 
228   	 0081				__epilogue_108:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
229   	 0081				for_end_3:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
230   	 0081	 81880000		ret			# LN: 105 | 
231   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__epilogue_108                                                                  			         Relocatable         processing_GEN_0000:0081H
_centralOutput                                                                  					 External   
_distortion                                                                     					 External   
_input_distortion                                                               					 External   
_leftInput                                                                      					 External   
_lfeOutput                                                                      					 External   
_lsOutput                                                                       					 External   
_numGain                                                                        					 External   
_outputMode                                                                     					 External   
_output_distortion                                                              					 External   
_processing                                                                     			  Public Relocatable       processing_GEN_0000:0000H
_rightInput                                                                     					 External   
_rsOutput                                                                       					 External   
_sampleBuffer                                                                   					 External   
case_0                                                                          			         Relocatable         processing_GEN_0000:0010H
case_1                                                                          			         Relocatable         processing_GEN_0000:0021H
case_2                                                                          			         Relocatable         processing_GEN_0000:0044H
for_end_0                                                                       			  Unused Relocatable        processing_GEN_0000:0020H
for_end_1                                                                       			  Unused Relocatable        processing_GEN_0000:0035H
for_end_2                                                                       			  Unused Relocatable        processing_GEN_0000:0065H
for_end_3                                                                       			  Unused Relocatable        processing_GEN_0000:0081H
label_begin_92                                                                  			  Unused Relocatable        processing_GEN_0000:0014H
label_begin_93                                                                  			  Unused Relocatable        processing_GEN_0000:0029H
label_begin_94                                                                  			  Unused Relocatable        processing_GEN_0000:0050H
label_begin_95                                                                  			  Unused Relocatable        processing_GEN_0000:0076H
label_end_92                                                                    			         Relocatable         processing_GEN_0000:001FH
label_end_93                                                                    			         Relocatable         processing_GEN_0000:0034H
label_end_94                                                                    			         Relocatable         processing_GEN_0000:0064H
label_end_95                                                                    			         Relocatable         processing_GEN_0000:0080H
switch_0                                                                        			  Unused Relocatable        processing_GEN_0000:0000H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0082H	 processing_GEN_0000                     			 CODE_OVLY                               
