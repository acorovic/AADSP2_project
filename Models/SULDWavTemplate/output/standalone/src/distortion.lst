1     	 0000					.public _hard_clip_threshold
2     	 0000					.extern _input_distortion
3     	 0000					.public _n_hard_clip_threshold
4     	 0000					.public _n_soft_clip_threshold1
5     	 0000					.public _n_soft_clip_threshold2
6     	 0000					.extern _output_distortion
7     	 0000					.public _soft_clip_threshold1
8     	 0000					.public _soft_clip_threshold2
9     	 0000					.public _soft_mul
10    	 0000					.public _soft_pow
11    	 0000					.extern _type
12    	 0000					.public _x
13    	 0000					.public _distortion
14    	 0000					.extern __mul_sat_laccum
15    	 0000					.extern __int_to_laccum
16    							.xdata_ovly
16     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
17    	 0000				__extractedConst_0_1
18    	 0000					.dw  (0xaaaaaab)
	 0000	 0AAAAAAB	 
19    							.xdata_ovly
19     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
20    	 0000				__extractedConst_1_0
21    	 0000					.dw  (0x15555555)
	 0000	 15555555	 
22    							.xdata_ovly
22     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
23    	 0000				__extractedConst_2_1
24    	 0000					.dw  (0xf5555555)
	 0000	 F5555555	 
25    							.xdata_ovly
25     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
26    	 0000				__extractedConst_3_0
27    	 0000					.dw  (0xeaaaaaab)
	 0000	 EAAAAAAB	 
28    							.xdata_ovly
28     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
29    	 0000				_hard_clip_threshold
30    	 0000					.dw  (0x10000000)
	 0000	 10000000	 
31    							.xdata_ovly
31     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
32    	 0000				_n_hard_clip_threshold
33    	 0000					.dw  (0xf0000000)
	 0000	 F0000000	 
34    							.xdata_ovly
34     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
35    	 0000				_n_soft_clip_threshold1
36    	 0000					.dw  (0xf5555555)
	 0000	 F5555555	 
37    							.xdata_ovly
37     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
38    	 0000				_n_soft_clip_threshold2
39    	 0000					.dw  (0xeaaaaaab)
	 0000	 EAAAAAAB	 
40    							.xdata_ovly
40     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
41    	 0000				_soft_clip_threshold1
42    	 0000					.dw  (0xaaaaaab)
	 0000	 0AAAAAAB	 
43    							.xdata_ovly
43     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
44    	 0000				_soft_clip_threshold2
45    	 0000					.dw  (0x15555555)
	 0000	 15555555	 
46    							.xdata_ovly
46     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
47    	 0000				_soft_mul
48    	 0000					.bss (0x3)
49    							.xdata_ovly
49     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
50    	 0000				_soft_pow
51    	 0000					.bss (0x3)
52    							.xdata_ovly
52     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
53    	 0000				_x
54    	 0000					.bss (0x3)
55    							.code_ovly
55     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
56    						
57    						
58    						
59    	 0000				switch_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
60    	 0000				_distortion:			/* LN: 25 | CYCLE: 0 | RULES: () */ 
61    	 0000	 847A4000		y0 = (0x4000)
62    	 0001	 88040000		a0 = xmem[_type + 0]			# LN: 32 | 
63    	 0002	 00004E80		a0 & a0			# LN: 32 | 
64    	 0003	 84080011		if (a == 0) jmp (case_0)			# LN: 32 | 
65    	 0004	 88040000		a0 = xmem[_type + 0]			# LN: 32 | 
66    	 0005	 894A0001		uhalfword(a1) = (0x1)			# LN: 32 | 
67    	 0006	 00004F08		a0 - a1			# LN: 32 | 
68    	 0007	 84080028		if (a == 0) jmp (case_1)			# LN: 32 | 
69    	 0008	 88040000		a0 = xmem[_type + 0]			# LN: 32 | 
70    	 0009	 894A0002		uhalfword(a1) = (0x2)			# LN: 32 | 
71    	 000A	 00004F08		a0 - a1			# LN: 32 | 
72    	 000B	 840800B7		if (a == 0) jmp (case_2)			# LN: 32 | 
73    	 000C	 88040000		a0 = xmem[_type + 0]			# LN: 32 | 
74    	 000D	 894A0003		uhalfword(a1) = (0x3)			# LN: 32 | 
75    	 000E	 00004F08		a0 - a1			# LN: 32 | 
76    	 000F	 840800C8		if (a == 0) jmp (case_3)			# LN: 32 | 
77    	 0010	 800800D8		jmp (__epilogue_104)			# LN: 139 | 
78    	 0011				case_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
79    	 0011	 81000026		do (0x10), label_end_92			# LN: 35 | 
80    	 0012				label_begin_92:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
81    	 0012	 B0040000		i0 = xmem[_input_distortion + 0]			# LN: 37 | 
82    							
83    	 0013	 A4050000		i4 = (0) + (_output_distortion)			# LN: 37 | 
84    	 0014	 81140000		x1 = xmem[i0]			# LN: 37 | 
85    							
86    	 0015	 B0140004		i0 = xmem[i4]			# LN: 37 | 
87    	 0016	 00002480		a0 = x1 * y0			# LN: 37 |
88    						
89    							// left one place
90    	 0017	 83AA0007		mr_sr = (0x07)
91    	 0018	 48407FFF		x0 = a0
92    	 0019	 40487FFF		a0 = x0
93    							// right one place
94    	 001A	 83AA0005		mr_sr = (0x05)
95    	 001B	 48407FFF		x0 = a0
96    	 001C	 40487FFF		a0 = x0
97    							// left one place
98    	 001D	 83AA0003		mr_sr = (0x03)
99    	 001E	 48407FFF		x0 = a0
100   	 001F	 40487FFF		a0 = x0
101   							
102   	 0020	 88540010		xmem[i0] = a0; i0 += 1	# LN: 34 | 
103   							
104   	 0021	 83AA0000		mr_sr = (0x00)
105   							
106   	 0022	 B0440000		xmem[_output_distortion + 0] = i0			# LN: 47 | 
107   	 0023	 B0040000		i0 = xmem[_input_distortion + 0]			# LN: 48 | 
108   	 0024	 00007FFF		nop #empty cycle
109   	 0025	 02087FFF		i0 += 1			# LN: 48 | 
110   	 0026				label_end_92:			# LN: 35 | CYCLE: 14 | RULES: ()
111   	 0026	 B0440000		xmem[_input_distortion + 0] = i0			# LN: 48 | 
112   	 0027				for_end_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
113   	 0027	 800800D8		jmp (__epilogue_104)			# LN: 50 | 
114   	 0028				case_1:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
115   	 0028	 810000B5		do (0x10), label_end_93			# LN: 54 | 
116   	 0029				label_begin_93:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
117   	 0029	 B0040000		i0 = xmem[_input_distortion + 0]			# LN: 37 | 
118   							
119   	 002A	 A4050000		i4 = (0) + (_output_distortion)			# LN: 37 | 
120   	 002B	 81140000		x1 = xmem[i0]			# LN: 37 | 
121   							
122   	 002C	 B0140004		i0 = xmem[i4]			# LN: 37 | 
123   	 002D	 00002480		a0 = x1 * y0			# LN: 37 |
124   	 002E	 88540000		xmem[i0] = a0			# LN: 56 | 
125   	 002F	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 57 | 
126   	 0030	 88040000		a0 = xmem[__extractedConst_0_1 + 0]			# LN: 57 | 
127   	 0031	 89140000		a1 = xmem[i0]			# LN: 57 | 
128   	 0032	 00004F01		a1 - a0			# LN: 57 | 
129   	 0033	 85080066		if (a <= 0) jmp (else_2)			# LN: 57 | 
130   	 0034	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 59 | 
131   	 0035	 88040000		a0 = xmem[__extractedConst_1_0 + 0]			# LN: 59 | 
132   	 0036	 89140000		a1 = xmem[i0]			# LN: 59 | 
133   	 0037	 00004F01		a1 - a0			# LN: 59 | 
134   	 0038	 8508003E		if (a <= 0) jmp (else_3)			# LN: 59 | 
135   	 0039	 A0050000		i0 = (0) + (_output_distortion)			# LN: 62 | 
136   	 003A	 B0140000		i0 = xmem[i0]			# LN: 62 | 
137   	 003B	 887A1000		a0 = (0x1000)			# LN: 62 | 
138   	 003C	 98540000		xmem[i0] = a0h			# LN: 62 | 
139   	 003D	 800800A3		jmp (endif_4)			# LN: 62 | 
140   	 003E				else_3:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
141   	 003E	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 66 | 
142   	 003F	 B1040000		i1 = xmem[_output_distortion + 0]			# LN: 66 | 
143   	 0040	 88140000		a0 = xmem[i0]			# LN: 66 | 
144   	 0041	 8C140001		b0 = xmem[i1]			# LN: 66 | 
145   	 0042	 00004C21		a1 =+ b0			# LN: 66 | 
146   	 0043	 80880000		call (__mul_sat_laccum)			# LN: 66 | 
147   	 0044	 A0440000		xmem[_soft_pow + 0] = a0g			# LN: 66 | 
148   	 0045	 98440001		xmem[_soft_pow + 1] = a0h			# LN: 66 | 
149   	 0046	 90440002		xmem[_soft_pow + 2] = a0l			# LN: 66 | 
150   	 0047	 A4040000		b0g = xmem[_soft_pow + 0]			# LN: 67 | 
151   	 0048	 9C040001		b0h = xmem[_soft_pow + 1]			# LN: 67 | 
152   	 0049	 884A000C		uhalfword(a0) = (0xc)			# LN: 67 | 
153   	 004A	 94040002		b0l = xmem[_soft_pow + 2]			# LN: 67 | 
154   	 004B	 80880000		call (__int_to_laccum)			# LN: 67 | 
155   	 004C	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 67, 67 | 
156   	 004D	 00004C28		a0 =+ b1			# LN: 67 | 
157   	 004E	 80880000		call (__mul_sat_laccum)			# LN: 67 | 
158   	 004F	 A0440000		xmem[_soft_pow + 0] = a0g			# LN: 67 | 
159   	 0050	 98440001		xmem[_soft_pow + 1] = a0h			# LN: 67 | 
160   	 0051	 90440002		xmem[_soft_pow + 2] = a0l			# LN: 67 | 
161   	 0052	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 68 | 
162   	 0053	 A1050000		i1 = (0) + (_output_distortion)			# LN: 69 | 
163   	 0054	 88140000		a0 = xmem[i0]			# LN: 68 | 
164   	 0055	 00004E00		a0 = a0 << 1			# LN: 68 | 
165   	 0056	 00004E00		a0 = a0 << 1			# LN: 68 | 
166   	 0057	 A0440000		xmem[_soft_mul + 0] = a0g			# LN: 68 | 
167   	 0058	 98440001		xmem[_soft_mul + 1] = a0h			# LN: 68 | 
168   	 0059	 90440002		xmem[_soft_mul + 2] = a0l			# LN: 68 | 
169   	 005A	 88040000		a0 = xmem[__extractedConst_2_1 + 0]			# LN: 69 | 
170   	 005B	 A1040000		a1g = xmem[_soft_mul + 0]			# LN: 69 | 
171   	 005C	 99040001		a1h = xmem[_soft_mul + 1]			# LN: 69 | 
172   	 005D	 91040002		a1l = xmem[_soft_mul + 2]			# LN: 69 | 
173   	 005E	 00004408		a0 = a0 + a1			# LN: 69 | 
174   	 005F	 A1040000		a1g = xmem[_soft_pow + 0]			# LN: 69 | 
175   	 0060	 99040001		a1h = xmem[_soft_pow + 1]			# LN: 69 | 
176   	 0061	 91040002		a1l = xmem[_soft_pow + 2]			# LN: 69 | 
177   	 0062	 B0140001		i0 = xmem[i1]			# LN: 69 | 
178   	 0063	 00004448		a0 = a0 - a1			# LN: 69 | 
179   	 0064	 88540000		xmem[i0] = a0			# LN: 69 | 
180   	 0065	 800800A3		jmp (endif_4)			# LN: 69 | 
181   	 0066				else_2:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
182   	 0066	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 75 | 
183   	 0067	 88040000		a0 = xmem[__extractedConst_2_1 + 0]			# LN: 75 | 
184   	 0068	 89140000		a1 = xmem[i0]			# LN: 75 | 
185   	 0069	 00004F01		a1 - a0			# LN: 75 | 
186   	 006A	 84C8009D		if (a >= 0) jmp (else_4)			# LN: 75 | 
187   	 006B	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 77 | 
188   	 006C	 88040000		a0 = xmem[__extractedConst_3_0 + 0]			# LN: 77 | 
189   	 006D	 89140000		a1 = xmem[i0]			# LN: 77 | 
190   	 006E	 00004F01		a1 - a0			# LN: 77 | 
191   	 006F	 84C80075		if (a >= 0) jmp (else_5)			# LN: 77 | 
192   	 0070	 A0050000		i0 = (0) + (_output_distortion)			# LN: 80 | 
193   	 0071	 B0140000		i0 = xmem[i0]			# LN: 80 | 
194   	 0072	 887AF000		a0 = (0xf000)			# LN: 80 | 
195   	 0073	 98540000		xmem[i0] = a0h			# LN: 80 | 
196   	 0074	 800800A3		jmp (endif_4)			# LN: 80 | 
197   	 0075				else_5:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
198   	 0075	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 84 | 
199   	 0076	 B1040000		i1 = xmem[_output_distortion + 0]			# LN: 84 | 
200   	 0077	 88140000		a0 = xmem[i0]			# LN: 84 | 
201   	 0078	 8C140001		b0 = xmem[i1]			# LN: 84 | 
202   	 0079	 00004C21		a1 =+ b0			# LN: 84 | 
203   	 007A	 80880000		call (__mul_sat_laccum)			# LN: 84 | 
204   	 007B	 A0440000		xmem[_soft_pow + 0] = a0g			# LN: 84 | 
205   	 007C	 98440001		xmem[_soft_pow + 1] = a0h			# LN: 84 | 
206   	 007D	 90440002		xmem[_soft_pow + 2] = a0l			# LN: 84 | 
207   	 007E	 A4040000		b0g = xmem[_soft_pow + 0]			# LN: 85 | 
208   	 007F	 9C040001		b0h = xmem[_soft_pow + 1]			# LN: 85 | 
209   	 0080	 884A000C		uhalfword(a0) = (0xc)			# LN: 85 | 
210   	 0081	 94040002		b0l = xmem[_soft_pow + 2]			# LN: 85 | 
211   	 0082	 80880000		call (__int_to_laccum)			# LN: 85 | 
212   	 0083	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 85, 85 | 
213   	 0084	 00004C28		a0 =+ b1			# LN: 85 | 
214   	 0085	 80880000		call (__mul_sat_laccum)			# LN: 85 | 
215   	 0086	 A0440000		xmem[_soft_pow + 0] = a0g			# LN: 85 | 
216   	 0087	 98440001		xmem[_soft_pow + 1] = a0h			# LN: 85 | 
217   	 0088	 90440002		xmem[_soft_pow + 2] = a0l			# LN: 85 | 
218   	 0089	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 86 | 
219   	 008A	 A1050000		i1 = (0) + (_output_distortion)			# LN: 87 | 
220   	 008B	 88140000		a0 = xmem[i0]			# LN: 86 | 
221   	 008C	 00004E00		a0 = a0 << 1			# LN: 86 | 
222   	 008D	 00004E00		a0 = a0 << 1			# LN: 86 | 
223   	 008E	 A0440000		xmem[_soft_mul + 0] = a0g			# LN: 86 | 
224   	 008F	 98440001		xmem[_soft_mul + 1] = a0h			# LN: 86 | 
225   	 0090	 90440002		xmem[_soft_mul + 2] = a0l			# LN: 86 | 
226   	 0091	 88040000		a0 = xmem[__extractedConst_0_1 + 0]			# LN: 87 | 
227   	 0092	 A1040000		a1g = xmem[_soft_mul + 0]			# LN: 87 | 
228   	 0093	 99040001		a1h = xmem[_soft_mul + 1]			# LN: 87 | 
229   	 0094	 91040002		a1l = xmem[_soft_mul + 2]			# LN: 87 | 
230   	 0095	 00004408		a0 = a0 + a1			# LN: 87 | 
231   	 0096	 A1040000		a1g = xmem[_soft_pow + 0]			# LN: 87 | 
232   	 0097	 99040001		a1h = xmem[_soft_pow + 1]			# LN: 87 | 
233   	 0098	 91040002		a1l = xmem[_soft_pow + 2]			# LN: 87 | 
234   	 0099	 B0140001		i0 = xmem[i1]			# LN: 87 | 
235   	 009A	 00004408		a0 = a0 + a1			# LN: 87 | 
236   	 009B	 88540000		xmem[i0] = a0			# LN: 87 | 
237   	 009C	 800800A3		jmp (endif_4)			# LN: 87 | 
238   	 009D				else_4:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
239   	 009D	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 93 | 
240   	 009E	 A1050000		i1 = (0) + (_output_distortion)			# LN: 93 | 
241   	 009F	 88140000		a0 = xmem[i0]			# LN: 93 | 
242   	 00A0	 B0140001		i0 = xmem[i1]			# LN: 93 | 
243   	 00A1	 00004E00		a0 = a0 << 1			# LN: 93 | 
244   	 00A2	 98540000		xmem[i0] = a0h			# LN: 93 | 
245   	 00A3				endif_2:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
246   	 00A3				endif_4:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
247   	 00A3	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 96 | 
248   	 00A4	 A1050000		i1 = (0) + (_output_distortion)			# LN: 96 | 
249   	 00A5	 88140000		a0 = xmem[i0]			# LN: 96 | 
250   	 00A6	 B0140001		i0 = xmem[i1]			# LN: 96 | 
251   	 00A7	 00004E40		a0 = a0 >> 1			# LN: 96 | 
252   	 00A8	 98540000		xmem[i0] = a0h			# LN: 96 | 
253   	 00A9	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 98 | 
254   	 00AA	 A1050000		i1 = (0) + (_output_distortion)			# LN: 98 | 
255   	 00AB	 88140000		a0 = xmem[i0]			# LN: 98 | 
256   	 00AC	 00004E00		a0 = a0 << 1			# LN: 98 | 
257   	 00AD	 B0140001		i0 = xmem[i1]			# LN: 98 | 
258   	 00AE	 00004E00		a0 = a0 << 1			# LN: 98 | 
259   	 00AF	 98540000		xmem[i0] = a0h			# LN: 98 | 
260   	 00B0	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 115 | 
261   							
262   	 00B1	 B8040000		i4 = xmem[_input_distortion + 0]
263   	 00B2	 02087FFF		i0 += 1		# LN: 115 | 
264   	 00B3	 020C7FFF		i4 += 1
265   	 00B4	 B0440000		xmem[_output_distortion + 0] = i0			# LN: 115 | 
266   	 00B5				label_end_93:			# LN: 54 | CYCLE: 20 | RULES: ()
267   	 00B5	 B8440000		xmem[_input_distortion + 0] = i4			# LN: 100 | 
268   	 00B6				for_end_1:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
269   	 00B6	 800800D8		jmp (__epilogue_104)			# LN: 102 | 
270   	 00B7				case_2:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
271   	 00B7	 810000C6		do (0x10), label_end_94			# LN: 106 | 
272   	 00B8				label_begin_94:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
273   	 00B8	 B0040000		i0 = xmem[_input_distortion + 0]			# LN: 37 | 
274   							
275   	 00B9	 A4050000		i4 = (0) + (_output_distortion)			# LN: 37 | 
276   	 00BA	 81140000		x1 = xmem[i0]			# LN: 37 | 
277   							
278   	 00BB	 B0140004		i0 = xmem[i4]			# LN: 37 | 
279   	 00BC	 00002480		a0 = x1 * y0			# LN: 37 |
280   						
281   	 00BD	 00004CC0		a0 = |a0|
282   						
283   	 00BE	 00004E00		a0 = a0 << 1			# LN: 111 | 
284   							
285   	 00BF	 00004E00		a0 = a0 << 1			# LN: 111 | 
286   							
287   	 00C0	 98540000		xmem[i0] = a0h			# LN: 114 | 
288   	 00C1	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 115 | 
289   							
290   	 00C2	 B8040000		i4 = xmem[_input_distortion + 0]
291   	 00C3	 02087FFF		i0 += 1		# LN: 115 | 
292   	 00C4	 020C7FFF		i4 += 1
293   	 00C5	 B0440000		xmem[_output_distortion + 0] = i0			# LN: 115 | 
294   						
295   	 00C6				label_end_94:			# LN: 106 | CYCLE: 14 | RULES: ()
296   	 00C6	 B8440000		xmem[_input_distortion + 0] = i4			# LN: 116 | 
297   	 00C7				for_end_2:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
298   	 00C7	 800800D8		jmp (__epilogue_104)			# LN: 118 | 
299   	 00C8				case_3:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
300   	 00C8	 810000D7		do (0x10), label_end_95			# LN: 122 | 
301   	 00C9				label_begin_95:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
302   	 00C9	 B0040000		i0 = xmem[_input_distortion + 0]			# LN: 37 | 
303   							
304   	 00CA	 A4050000		i4 = (0) + (_output_distortion)			# LN: 37 | 
305   	 00CB	 81140000		x1 = xmem[i0]			# LN: 37 | 
306   							
307   	 00CC	 B0140004		i0 = xmem[i4]			# LN: 37 | 
308   	 00CD	 00002480		a0 = x1 * y0			# LN: 37 |
309   							
310   	 00CE	 00004CE4		b0 = |a0|
311   	 00CF	 00004420		a0 = a0 + b0
312   							
313   	 00D0	 00004E00		a0 = a0 << 1			# LN: 131 | 
314   	 00D1	 98540000		xmem[i0] = a0h			# LN: 131 | 
315   							
316   	 00D2	 B0040000		i0 = xmem[_output_distortion + 0]			# LN: 133 | 
317   	 00D3	 B8040000		i4 = xmem[_input_distortion + 0]
318   	 00D4	 02087FFF		i0 += 1		# LN: 115 | 
319   	 00D5	 020C7FFF		i4 += 1
320   	 00D6	 B0440000		xmem[_output_distortion + 0] = i0			# LN: 115 | 
321   	 00D7				label_end_95:			# LN: 122 | CYCLE: 28 | RULES: ()
322   	 00D7	 B8440000		xmem[_input_distortion + 0] = i4			# LN: 134 | 
323   	 00D8				__epilogue_104:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
324   	 00D8				for_end_3:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
325   	 00D8	 81880000		ret			# LN: 141 | 
326   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__epilogue_104                                                                  			         Relocatable         distortion_GEN_0013:00D8H
__extractedConst_0_1                                                            			         Relocatable         distortion_GEN_0000:0000H
__extractedConst_1_0                                                            			         Relocatable         distortion_GEN_0001:0000H
__extractedConst_2_1                                                            			         Relocatable         distortion_GEN_0002:0000H
__extractedConst_3_0                                                            			         Relocatable         distortion_GEN_0003:0000H
__int_to_laccum                                                                 					 External   
__mul_sat_laccum                                                                					 External   
_distortion                                                                     			  Public Relocatable       distortion_GEN_0013:0000H
_hard_clip_threshold                                                            			  Public Relocatable       distortion_GEN_0004:0000H
_input_distortion                                                               					 External   
_n_hard_clip_threshold                                                          			  Public Relocatable       distortion_GEN_0005:0000H
_n_soft_clip_threshold1                                                         			  Public Relocatable       distortion_GEN_0006:0000H
_n_soft_clip_threshold2                                                         			  Public Relocatable       distortion_GEN_0007:0000H
_output_distortion                                                              					 External   
_soft_clip_threshold1                                                           			  Public Relocatable       distortion_GEN_0008:0000H
_soft_clip_threshold2                                                           			  Public Relocatable       distortion_GEN_0009:0000H
_soft_mul                                                                       			  Public Relocatable       distortion_GEN_0010:0000H
_soft_pow                                                                       			  Public Relocatable       distortion_GEN_0011:0000H
_type                                                                           					 External   
_x                                                                              			  Public Relocatable       distortion_GEN_0012:0000H
case_0                                                                          			         Relocatable         distortion_GEN_0013:0011H
case_1                                                                          			         Relocatable         distortion_GEN_0013:0028H
case_2                                                                          			         Relocatable         distortion_GEN_0013:00B7H
case_3                                                                          			         Relocatable         distortion_GEN_0013:00C8H
else_2                                                                          			         Relocatable         distortion_GEN_0013:0066H
else_3                                                                          			         Relocatable         distortion_GEN_0013:003EH
else_4                                                                          			         Relocatable         distortion_GEN_0013:009DH
else_5                                                                          			         Relocatable         distortion_GEN_0013:0075H
endif_2                                                                         			  Unused Relocatable        distortion_GEN_0013:00A3H
endif_4                                                                         			         Relocatable         distortion_GEN_0013:00A3H
for_end_0                                                                       			  Unused Relocatable        distortion_GEN_0013:0027H
for_end_1                                                                       			  Unused Relocatable        distortion_GEN_0013:00B6H
for_end_2                                                                       			  Unused Relocatable        distortion_GEN_0013:00C7H
for_end_3                                                                       			  Unused Relocatable        distortion_GEN_0013:00D8H
label_begin_92                                                                  			  Unused Relocatable        distortion_GEN_0013:0012H
label_begin_93                                                                  			  Unused Relocatable        distortion_GEN_0013:0029H
label_begin_94                                                                  			  Unused Relocatable        distortion_GEN_0013:00B8H
label_begin_95                                                                  			  Unused Relocatable        distortion_GEN_0013:00C9H
label_end_92                                                                    			         Relocatable         distortion_GEN_0013:0026H
label_end_93                                                                    			         Relocatable         distortion_GEN_0013:00B5H
label_end_94                                                                    			         Relocatable         distortion_GEN_0013:00C6H
label_end_95                                                                    			         Relocatable         distortion_GEN_0013:00D7H
switch_0                                                                        			  Unused Relocatable        distortion_GEN_0013:0000H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 distortion_GEN_0000                     			 X_OVLY                                  
0001H	 distortion_GEN_0001                     			 X_OVLY                                  
0001H	 distortion_GEN_0002                     			 X_OVLY                                  
0001H	 distortion_GEN_0003                     			 X_OVLY                                  
0001H	 distortion_GEN_0004                     			 X_OVLY                                  
0001H	 distortion_GEN_0005                     			 X_OVLY                                  
0001H	 distortion_GEN_0006                     			 X_OVLY                                  
0001H	 distortion_GEN_0007                     			 X_OVLY                                  
0001H	 distortion_GEN_0008                     			 X_OVLY                                  
0001H	 distortion_GEN_0009                     			 X_OVLY                                  
0003H	 distortion_GEN_0010                     			 X_OVLY                                  
0003H	 distortion_GEN_0011                     			 X_OVLY                                  
0003H	 distortion_GEN_0012                     			 X_OVLY                                  
00D9H	 distortion_GEN_0013                     			 CODE_OVLY                               
