1     	 0000					.public _centralOutput
2     	 0000					.public _enable
3     	 0000					.public _input_distortion
4     	 0000					.public _leftInput
5     	 0000					.public _lfeOutput
6     	 0000					.public _lsOutput
7     	 0000					.public _numGain
8     	 0000					.public _outputMode
9     	 0000					.public _output_distortion
10    	 0000					.public _rightInput
11    	 0000					.public _rsOutput
12    	 0000					.public _sampleBuffer
13    	 0000					.public _type
14    	 0000					.extern _cl_wavread_bits_per_sample
15    	 0000					.extern _cl_wavread_close
16    	 0000					.extern _cl_wavread_frame_rate
17    	 0000					.extern _cl_wavread_getnchannels
18    	 0000					.extern _cl_wavread_number_of_frames
19    	 0000					.extern _cl_wavread_open
20    	 0000					.extern _cl_wavread_recvsample
21    	 0000					.extern _cl_wavwrite_close
22    	 0000					.extern _cl_wavwrite_open
23    	 0000					.extern _cl_wavwrite_sendsample
24    	 0000					.public _main
25    	 0000					.extern _memset
26    	 0000					.extern _printf
27    	 0000					.extern _processing
28    	 0000					.extern _strcpy
29    	 0000					.extern __div
30    							.xdata_ovly
30     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
31    	 0000				_centralOutput
32    	 0000					.dw _sampleBuffer+64
	 0000	 00000040	 
33    							.xdata_ovly
33     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
34    	 0000				_enable
35    	 0000					.dw  (0x1)
	 0000	 00000001	 
36    							.xdata_ovly
36     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
37    	 0000				_input_distortion
38    	 0000					.bss (0x1)
39    							.xdata_ovly
39     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
40    	 0000				_leftInput
41    	 0000					.dw _sampleBuffer
	 0000	 00000000	 
42    							.xdata_ovly
42     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
43    	 0000				_lfeOutput
44    	 0000					.dw _sampleBuffer+80
	 0000	 00000050	 
45    							.xdata_ovly
45     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
46    	 0000				_lsOutput
47    	 0000					.dw _sampleBuffer+32
	 0000	 00000020	 
48    							.ydata_ovly
48     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
49    	 0000				_numGain
50    	 0000					.dw  (0x50c335d4)
	 0000	 50C335D4	 
51    							.xdata_ovly
51     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
52    	 0000				_outputMode
53    	 0000					.dw  (0x0)
	 0000	 00000000	 
54    							.xdata_ovly
54     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
55    	 0000				_output_distortion
56    	 0000					.bss (0x1)
57    							.xdata_ovly
57     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
58    	 0000				_rightInput
59    	 0000					.dw _sampleBuffer+16
	 0000	 00000010	 
60    							.xdata_ovly
60     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
61    	 0000				_rsOutput
62    	 0000					.dw _sampleBuffer+48
	 0000	 00000030	 
63    							.xdata_ovly align 16
63     >> start of macro: .xdata_ovly align
1+    									seg_align , "X_OVLY", X, 16
1+     >> start of macro: seg_align
1+    						    SEGMENT "X_OVLY" ALIGN( 16 )
2+    						  .if "" != ""
3+    						___SegStart_X_
4+    						  .endif
5+    							#RememberSegmentType
6+     >> end of macro: seg_align
2+     >> end of macro: .xdata_ovly align
64    	 0000				_sampleBuffer
65    	 0000					.bss (0x80)
66    							.xdata_ovly
66     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
67    	 0000				_string_const_0
68    	 0000					.dw  (0x45)
	 0000	 00000045	 
69    	 0001					.dw  (0x72)
	 0001	 00000072	 
70    	 0002					.dw  (0x72)
	 0002	 00000072	 
71    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
72    	 0004					.dw  (0x72)
	 0004	 00000072	 
73    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
74    	 0006					.dw  (0x20)
	 0006	 00000020	 
75    	 0007					.dw  (0x43)
	 0007	 00000043	 
76    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
77    	 0009					.dw  (0x75)
	 0009	 00000075	 
78    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
79    	 000B					.dw  (0x64)
	 000B	 00000064	 
80    	 000C					.dw  (0x20)
	 000C	 00000020	 
81    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
82    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
83    	 000F					.dw  (0x74)
	 000F	 00000074	 
84    	 0010					.dw  (0x20)
	 0010	 00000020	 
85    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
86    	 0012					.dw  (0x70)
	 0012	 00000070	 
87    	 0013					.dw  (0x65)
	 0013	 00000065	 
88    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
89    	 0015					.dw  (0x20)
	 0015	 00000020	 
90    	 0016					.dw  (0x77)
	 0016	 00000077	 
91    	 0017					.dw  (0x61)
	 0017	 00000061	 
92    	 0018					.dw  (0x76)
	 0018	 00000076	 
93    	 0019					.dw  (0x65)
	 0019	 00000065	 
94    	 001A					.dw  (0x66)
	 001A	 00000066	 
95    	 001B					.dw  (0x69)
	 001B	 00000069	 
96    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
97    	 001D					.dw  (0x65)
	 001D	 00000065	 
98    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
99    	 001F					.dw  (0xa)
	 001F	 0000000A	 
100   	 0020					.dw  (0x0)
	 0020	 00000000	 
101   							.xdata_ovly
101    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
102   	 0000				_string_const_1
103   	 0000					.dw  (0x45)
	 0000	 00000045	 
104   	 0001					.dw  (0x72)
	 0001	 00000072	 
105   	 0002					.dw  (0x72)
	 0002	 00000072	 
106   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
107   	 0004					.dw  (0x72)
	 0004	 00000072	 
108   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
109   	 0006					.dw  (0x20)
	 0006	 00000020	 
110   	 0007					.dw  (0x43)
	 0007	 00000043	 
111   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
112   	 0009					.dw  (0x75)
	 0009	 00000075	 
113   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
114   	 000B					.dw  (0x64)
	 000B	 00000064	 
115   	 000C					.dw  (0x20)
	 000C	 00000020	 
116   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
117   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
118   	 000F					.dw  (0x74)
	 000F	 00000074	 
119   	 0010					.dw  (0x20)
	 0010	 00000020	 
120   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
121   	 0012					.dw  (0x70)
	 0012	 00000070	 
122   	 0013					.dw  (0x65)
	 0013	 00000065	 
123   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
124   	 0015					.dw  (0x20)
	 0015	 00000020	 
125   	 0016					.dw  (0x77)
	 0016	 00000077	 
126   	 0017					.dw  (0x61)
	 0017	 00000061	 
127   	 0018					.dw  (0x76)
	 0018	 00000076	 
128   	 0019					.dw  (0x65)
	 0019	 00000065	 
129   	 001A					.dw  (0x66)
	 001A	 00000066	 
130   	 001B					.dw  (0x69)
	 001B	 00000069	 
131   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
132   	 001D					.dw  (0x65)
	 001D	 00000065	 
133   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
134   	 001F					.dw  (0xa)
	 001F	 0000000A	 
135   	 0020					.dw  (0x0)
	 0020	 00000000	 
136   							.xdata_ovly
136    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
137   	 0000				_type
138   	 0000					.dw  (0x0)
	 0000	 00000000	 
139   							.code_ovly
139    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
140   						
141   						
142   						
143   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
144   							.if defined(_OVLY_)
145   								.if .strcmp('standalone',_OVLY_)=0
146   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
147   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
148   	 0000				dummy		.equ(__start)
149   								.else
150   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
151   						dummy		.equ(__intvec)
152   								.endif
153   								.endif
154   							.endif
155   						
156   	 0000				_main:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
157   	 0000	 A2540017		xmem[i7] = a2g; i7 += 1			# LN: 35, 35 | 
158   	 0001	 9A540017		xmem[i7] = a2h; i7 += 1			# LN: 35, 35 | 
159   	 0002	 92540017		xmem[i7] = a2l; i7 += 1			# LN: 35, 35 | 
160   	 0003	 A3540017		xmem[i7] = a3g; i7 += 1			# LN: 35, 35 | 
161   	 0004	 9B540017		xmem[i7] = a3h; i7 += 1			# LN: 35, 35 | 
162   	 0005	 93540017		xmem[i7] = a3l; i7 += 1			# LN: 35, 35 | 
163   	 0006	 A6540017		xmem[i7] = b2g; i7 += 1			# LN: 35, 35 | 
164   	 0007	 9E540017		xmem[i7] = b2h; i7 += 1			# LN: 35, 35 | 
165   	 0008	 96540017		xmem[i7] = b2l; i7 += 1			# LN: 35, 35 | 
166   	 0009	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 35, 35 | 
167   	 000A	 A7540017		xmem[i7] = b3g; i7 += 1			# LN: 35, 35 | 
168   	 000B	 9F540017		xmem[i7] = b3h; i7 += 1			# LN: 35, 35 | 
169   	 000C	 97540017		xmem[i7] = b3l; i7 += 1			# LN: 35, 35 | 
170   	 000D	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 35, 35 | 
171   	 000E	 87750201		i7 = i7 + (0x201)			# LN: 35 | 
172   	 000F	 B0090038		i4 = i0			# LN: 35 | 
173   	 0010	 B8090030		i0 = i4			# LN: 49 | 
174   	 0011	 81450003		i1 = i4 + (0x3)			# LN: 50 | 
175   	 0012	 02284DC2		i0 += 2; a2 = 0			# LN: 49, 53 | 
176   	 0013	 B0140000		i0 = xmem[i0]			# LN: 49 | 
177   	 0014	 B1140001		i1 = xmem[i1]			# LN: 50 | 
178   	 0015	 8B140000		a3 = xmem[i0]			# LN: 49 | 
179   	 0016	 8E140001		b2 = xmem[i1]			# LN: 50 | 
180   	 0017	 8080001F		do (0x8), label_end_92			# LN: 53 | 
181   	 0018				label_begin_92:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
182   	 0018	 00004C10		a0 =+ a2			# LN: 54 | 
183   	 0019	 00004EC0		a0 = a0 << 4			# LN: 54 | 
184   	 001A	 48704DC0		i0 = a0; a0 = 0			# LN: 54, 54 | 
185   	 001B	 894A0010		uhalfword(a1) = (0x10)			# LN: 54 | 
186   	 001C	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 54 | 
187   	 001D	 80880000		call (_memset)			# LN: 54 | 
188   	 001E	 884A0001		uhalfword(a0) = (0x1)			# LN: 53 | 
189   	 001F				label_end_92:			# LN: 53 | CYCLE: 7 | RULES: ()
190   	 001F	 00004502		a2 = a2 + a0			# LN: 53 | 
191   	 0020				for_end_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
192   	 0020	 B1140004		i1 = xmem[i4]			# LN: 58 | 
193   	 0021	 90750100		i0 = i7 - (256 - 0)			# LN: 58 | 
194   	 0022	 80880000		call (_strcpy)			# LN: 58 | 
195   	 0023	 90750100		i0 = i7 - (256 - 0)			# LN: 59 | 
196   	 0024	 80880000		call (_cl_wavread_open)			# LN: 59 | 
197   	 0025	 98090032		AnyReg(i2, a0h)			# LN: 59 | 
198   	 0026	 08727FFF		a0 = i2			# LN: 60 | 
199   	 0027	 00004E80		a0 & a0			# LN: 60 | 
200   	 0028	 8448002D		if (a != 0) jmp (else_0)			# LN: 60 | 
201   	 0029	 A0050000		i0 = (0) + (_string_const_0)			# LN: 62 | 
202   	 002A	 80880000		call (_printf)			# LN: 62 | 
203   	 002B	 886AFFFF		halfword(a0) = (0xffff)			# LN: 63 | 
204   	 002C	 800800C1		jmp (__epilogue_226)			# LN: 63 | 
205   	 002D				endif_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
206   	 002D				else_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
207   	 002D	 B2090030		i0 = i2			# LN: 69 | 
208   	 002E	 80880000		call (_cl_wavread_getnchannels)			# LN: 69 | 
209   	 002F	 00004C02		a2 =+ a0			# LN: 69 | 
210   	 0030	 B2090030		i0 = i2			# LN: 70 | 
211   	 0031	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 70 | 
212   	 0032	 00004C25		b1 =+ a0			# LN: 70 | 
213   	 0033	 B2090030		i0 = i2			# LN: 71 | 
214   	 0034	 80880000		call (_cl_wavread_frame_rate)			# LN: 71 | 
215   	 0035	 00004C01		a1 =+ a0			# LN: 71 | 
216   	 0036	 B2090030		i0 = i2			# LN: 72 | 
217   	 0037	 80880000		call (_cl_wavread_number_of_frames)			# LN: 72 | 
218   	 0038	 00004C27		b3 =+ a0			# LN: 72 | 
219   	 0039	 884A0030		uhalfword(a0) = (0x30)			# LN: 74 | 
220   	 003A	 A64A0000		b2g = (0x0)			# LN: 74 | 
221   	 003B	 A04A0000		a0g = (0x0)			# LN: 74 | 
222   	 003C	 00004F26		b2 - a0			# LN: 74 | 
223   	 003D	 8608004E		if (b == 0) jmp (case_0)			# LN: 74 | 
224   	 003E	 884A0031		uhalfword(a0) = (0x31)			# LN: 74 | 
225   	 003F	 A64A0000		b2g = (0x0)			# LN: 74 | 
226   	 0040	 A04A0000		a0g = (0x0)			# LN: 74 | 
227   	 0041	 00004F26		b2 - a0			# LN: 74 | 
228   	 0042	 86080051		if (b == 0) jmp (case_1)			# LN: 74 | 
229   	 0043	 884A0032		uhalfword(a0) = (0x32)			# LN: 74 | 
230   	 0044	 A64A0000		b2g = (0x0)			# LN: 74 | 
231   	 0045	 A04A0000		a0g = (0x0)			# LN: 74 | 
232   	 0046	 00004F26		b2 - a0			# LN: 74 | 
233   	 0047	 86080054		if (b == 0) jmp (case_2)			# LN: 74 | 
234   	 0048	 884A0033		uhalfword(a0) = (0x33)			# LN: 74 | 
235   	 0049	 A64A0000		b2g = (0x0)			# LN: 74 | 
236   	 004A	 A04A0000		a0g = (0x0)			# LN: 74 | 
237   	 004B	 00004F26		b2 - a0			# LN: 74 | 
238   	 004C	 86080057		if (b == 0) jmp (case_3)			# LN: 74 | 
239   	 004D	 80080059		jmp (switch_end_0)			# LN: 74 | 
240   	 004E				case_0:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
241   	 004E	 00004DC0		a0 = 0			# LN: 77 | 
242   	 004F	 98440000		xmem[_type + 0] = a0h			# LN: 77 | 
243   	 0050	 80080059		jmp (switch_end_0)			# LN: 78 | 
244   	 0051				case_1:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
245   	 0051	 884A0001		uhalfword(a0) = (0x1)			# LN: 80 | 
246   	 0052	 98440000		xmem[_type + 0] = a0h			# LN: 80 | 
247   	 0053	 80080059		jmp (switch_end_0)			# LN: 81 | 
248   	 0054				case_2:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
249   	 0054	 884A0002		uhalfword(a0) = (0x2)			# LN: 83 | 
250   	 0055	 98440000		xmem[_type + 0] = a0h			# LN: 83 | 
251   	 0056	 80080059		jmp (switch_end_0)			# LN: 84 | 
252   	 0057				case_3:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
253   	 0057	 884A0003		uhalfword(a0) = (0x3)			# LN: 86 | 
254   	 0058	 98440000		xmem[_type + 0] = a0h			# LN: 86 | 
255   	 0059				switch_1:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
256   	 0059				switch_end_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
257   	 0059	 884A0030		uhalfword(a0) = (0x30)			# LN: 90 | 
258   	 005A	 A34A0000		a3g = (0x0)			# LN: 90 | 
259   	 005B	 A04A0000		a0g = (0x0)			# LN: 90 | 
260   	 005C	 00004F03		a3 - a0			# LN: 90 | 
261   	 005D	 84080069		if (a == 0) jmp (case_4)			# LN: 90 | 
262   	 005E	 884A0031		uhalfword(a0) = (0x31)			# LN: 90 | 
263   	 005F	 A34A0000		a3g = (0x0)			# LN: 90 | 
264   	 0060	 A04A0000		a0g = (0x0)			# LN: 90 | 
265   	 0061	 00004F03		a3 - a0			# LN: 90 | 
266   	 0062	 8408006F		if (a == 0) jmp (case_5)			# LN: 90 | 
267   	 0063	 884A0032		uhalfword(a0) = (0x32)			# LN: 90 | 
268   	 0064	 A34A0000		a3g = (0x0)			# LN: 90 | 
269   	 0065	 A04A0000		a0g = (0x0)			# LN: 90 | 
270   	 0066	 00004F03		a3 - a0			# LN: 90 | 
271   	 0067	 84080075		if (a == 0) jmp (case_6)			# LN: 90 | 
272   	 0068	 8008007A		jmp (switch_end_1)			# LN: 90 | 
273   	 0069				case_4:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
274   	 0069	 00004DC0		a0 = 0			# LN: 94 | 
275   	 006A	 98440000		xmem[_outputMode + 0] = a0h			# LN: 94 | 
276   	 006B	 884A0002		uhalfword(a0) = (0x2)			# LN: 95 | 
277   	 006C	 90750201		i0 = i7 - (0x201)			# LN: 95 | 
278   	 006D	 98540000		xmem[i0] = a0h			# LN: 95 | 
279   	 006E	 8008007A		jmp (switch_end_1)			# LN: 95 | 
280   	 006F				case_5:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
281   	 006F	 884A0001		uhalfword(a0) = (0x1)			# LN: 98 | 
282   	 0070	 98440000		xmem[_outputMode + 0] = a0h			# LN: 98 | 
283   	 0071	 884A0004		uhalfword(a0) = (0x4)			# LN: 99 | 
284   	 0072	 90750201		i0 = i7 - (0x201)			# LN: 99 | 
285   	 0073	 98540000		xmem[i0] = a0h			# LN: 99 | 
286   	 0074	 8008007A		jmp (switch_end_1)			# LN: 99 | 
287   	 0075				case_6:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
288   	 0075	 884A0002		uhalfword(a0) = (0x2)			# LN: 102 | 
289   	 0076	 98440000		xmem[_outputMode + 0] = a0h			# LN: 102 | 
290   	 0077	 884A0006		uhalfword(a0) = (0x6)			# LN: 103 | 
291   	 0078	 90750201		i0 = i7 - (0x201)			# LN: 103 | 
292   	 0079	 98540000		xmem[i0] = a0h			# LN: 103 | 
293   	 007A				switch_end_1:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
294   	 007A	 90750200		i0 = i7 - (512 - 0)			# LN: 108 | 
295   	 007B	 020C4C2C		i4 += 1; b0 =+ a1			# LN: 108, 109 | 
296   	 007C	 91750201		i1 = i7 - (0x201)			# LN: 109 | 
297   	 007D	 88140001		a0 = xmem[i1]			# LN: 109 | 
298   	 007E	 B1140004		i1 = xmem[i4]			# LN: 108 | 
299   	 007F	 00004C01		a1 =+ a0			# LN: 109 | 
300   	 0080	 80880000		call (_strcpy)			# LN: 108 | 
301   	 0081	 00004C28		a0 =+ b1			# LN: 109 | 
302   	 0082	 90750200		i0 = i7 - (512 - 0)			# LN: 109 | 
303   	 0083	 80880000		call (_cl_wavwrite_open)			# LN: 109 | 
304   	 0084	 98090033		AnyReg(i3, a0h)			# LN: 109 | 
305   	 0085	 08737FFF		a0 = i3			# LN: 110 | 
306   	 0086	 00004E80		a0 & a0			# LN: 110 | 
307   	 0087	 8448008C		if (a != 0) jmp (else_1)			# LN: 110 | 
308   	 0088	 A0050000		i0 = (0) + (_string_const_1)			# LN: 112 | 
309   	 0089	 80880000		call (_printf)			# LN: 112 | 
310   	 008A	 886AFFFF		halfword(a0) = (0xffff)			# LN: 113 | 
311   	 008B	 800800C1		jmp (__epilogue_226)			# LN: 113 | 
312   	 008C				endif_1:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
313   	 008C				else_1:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
314   	 008C	 894A0010		uhalfword(a1) = (0x10)			# LN: 126 | 
315   	 008D	 00004C38		a0 =+ b3			# LN: 126 | 
316   	 008E	 80880000		call (__div)			# LN: 126 | 
317   	 008F	 98090030		AnyReg(i0, a0h)			# LN: 126 | 
318   	 0090	 00007FFF		nop #empty cycle
319   	 0091	 800100BB		do (i0), label_end_97			# LN: 126 | 
320   	 0092				label_begin_97:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
321   	 0092	 00004DC3		a3 = 0			# LN: 128 | 
322   	 0093	 810000A4		do (0x10), label_end_94			# LN: 128 | 
323   	 0094				label_begin_94:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
324   	 0094	 9A090030		AnyReg(i0, a2h)			# LN: 130 | 
325   	 0095	 00004DC4		b0 = 0			# LN: 130 | 
326   	 0096	 800100A2		do (i0), label_end_93			# LN: 130 | 
327   	 0097				label_begin_93:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
328   	 0097	 B2090030		i0 = i2			# LN: 132 | 
329   	 0098	 80880000		call (_cl_wavread_recvsample)			# LN: 132 | 
330   	 0099	 00005C01		a1 =+ a0; b1 =+ b0			# LN: 132, 133 | 
331   	 009A	 00004EC5		b1 = b1 << 4			# LN: 133 | 
332   	 009B	 4D704C08		i0 = b1; a0 =+ a1			# LN: 133, 133 | 
333   	 009C	 894A0001		uhalfword(a1) = (0x1)			# LN: 130 | 
334   	 009D	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 133 | 
335   	 009E	 0D70442C		b1 = i0; b0 = b0 + a1			# LN: 133, 130 | 
336   	 009F	 000045A9		a1 = a3 + b1			# LN: 133 | 
337   	 00A0	 99090030		AnyReg(i0, a1h)			# LN: 133 | 
338   	 00A1	 00007FFF		nop #empty cycle
339   	 00A2				label_end_93:			# LN: 130 | CYCLE: 11 | RULES: ()
340   	 00A2	 98540000		xmem[i0] = a0h			# LN: 133 | 
341   	 00A3				init_latch_label_2:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
342   	 00A3				for_end_3:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
343   	 00A3	 884A0001		uhalfword(a0) = (0x1)			# LN: 128 | 
344   	 00A4				label_end_94:			# LN: 128 | CYCLE: 1 | RULES: ()
345   	 00A4	 00004583		a3 = a3 + a0			# LN: 128 | 
346   	 00A5				for_end_2:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
347   	 00A5	 80880000		call (_processing)			# LN: 137 | 
348   	 00A6	 00004DC1		a1 = 0			# LN: 139 | 
349   	 00A7	 810000BA		do (0x10), label_end_96			# LN: 139 | 
350   	 00A8				label_begin_96:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
351   	 00A8	 90750201		i0 = i7 - (0x201)			# LN: 141 | 
352   	 00A9	 18404DC4		a0 = xmem[i0]; b0 = 0			# LN: 141, 141 | 
353   	 00AA	 98090030		AnyReg(i0, a0h)			# LN: 141 | 
354   	 00AB	 00007FFF		nop #empty cycle
355   	 00AC	 800100B8		do (i0), label_end_95			# LN: 141 | 
356   	 00AD				label_begin_95:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
357   	 00AD	 00004C20		a0 =+ b0			# LN: 143 | 
358   	 00AE	 00004EC0		a0 = a0 << 4			# LN: 143 | 
359   	 00AF	 48717FFF		i1 = a0			# LN: 143 | 
360   	 00B0	 B3090030		i0 = i3			# LN: 144 | 
361   	 00B1	 81150000		i1 = i1 + (_sampleBuffer + 0)			# LN: 143 | 
362   	 00B2	 08717FFF		a0 = i1			# LN: 143 | 
363   	 00B3	 00004408		a0 = a0 + a1			# LN: 143 | 
364   	 00B4	 98090031		AnyReg(i1, a0h)			# LN: 143 | 
365   	 00B5	 884A0001		uhalfword(a0) = (0x1)			# LN: 141 | 
366   	 00B6	 1D414424		b1 = xmem[i1]; b0 = b0 + a0			# LN: 143, 141 | 
367   	 00B7	 00004C28		a0 =+ b1			# LN: 143 | 
368   	 00B8				label_end_95:			# LN: 141 | CYCLE: 11 | RULES: ()
369   	 00B8	 80880000		call (_cl_wavwrite_sendsample)			# LN: 144 | 
370   	 00B9				init_latch_label_4:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
371   	 00B9				for_end_5:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
372   	 00B9	 884A0001		uhalfword(a0) = (0x1)			# LN: 139 | 
373   	 00BA				label_end_96:			# LN: 139 | CYCLE: 1 | RULES: ()
374   	 00BA	 00004481		a1 = a1 + a0			# LN: 139 | 
375   	 00BB				init_latch_label_5:			/* LN: 147 | CYCLE: 0 | RULES: () */ 
376   	 00BB				for_end_4:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
377   	 00BB				label_end_97:			# LN: 126 | CYCLE: 0 | RULES: ()
378   	 00BB	 00007FFF		nop #empty cycle
379   	 00BC				for_end_1:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
380   	 00BC	 B2090030		i0 = i2			# LN: 152 | 
381   	 00BD	 80880000		call (_cl_wavread_close)			# LN: 152 | 
382   	 00BE	 B3090030		i0 = i3			# LN: 153 | 
383   	 00BF	 80880000		call (_cl_wavwrite_close)			# LN: 153 | 
384   	 00C0	 00004DC0		a0 = 0			# LN: 156 | 
385   	 00C1				__epilogue_226:			/* LN: 157 | CYCLE: 0 | RULES: () */ 
386   	 00C1	 97750201		i7 = i7 - (0x201)			# LN: 157 | 
387   	 00C2	 02177FFF		i7 -= 1			# LN: 157 | 
388   	 00C3	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
389   	 00C4	 97140027		b3l = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
390   	 00C5	 9F140027		b3h = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
391   	 00C6	 A7140027		b3g = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
392   	 00C7	 B2140027		i2 = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
393   	 00C8	 96140027		b2l = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
394   	 00C9	 9E140027		b2h = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
395   	 00CA	 A6140027		b2g = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
396   	 00CB	 93140027		a3l = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
397   	 00CC	 9B140027		a3h = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
398   	 00CD	 A3140027		a3g = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
399   	 00CE	 92140027		a2l = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
400   	 00CF	 9A140027		a2h = xmem[i7]; i7 -= 1			# LN: 157, 157 | 
401   	 00D0	 A2140007		a2g = xmem[i7]			# LN: 157 | 
402   	 00D1	 81880000		ret			# LN: 157 | 
403   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_226                                                                  			         Relocatable         main_GEN_0015:00C1H
__start                                                                         					 External   
_centralOutput                                                                  			  Public Relocatable       main_GEN_0000:0000H
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_enable                                                                         			  Public Relocatable       main_GEN_0001:0000H
_input_distortion                                                               			  Public Relocatable       main_GEN_0002:0000H
_leftInput                                                                      			  Public Relocatable       main_GEN_0003:0000H
_lfeOutput                                                                      			  Public Relocatable       main_GEN_0004:0000H
_lsOutput                                                                       			  Public Relocatable       main_GEN_0005:0000H
_main                                                                           			  Public Relocatable       main_GEN_0015:0000H
_memset                                                                         					 External   
_numGain                                                                        			  Public Relocatable       main_GEN_0006:0000H
_outputMode                                                                     			  Public Relocatable       main_GEN_0007:0000H
_output_distortion                                                              			  Public Relocatable       main_GEN_0008:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_rightInput                                                                     			  Public Relocatable       main_GEN_0009:0000H
_rsOutput                                                                       			  Public Relocatable       main_GEN_0010:0000H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0011:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0012:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0013:0000H
_type                                                                           			  Public Relocatable       main_GEN_0014:0000H
case_0                                                                          			         Relocatable         main_GEN_0015:004EH
case_1                                                                          			         Relocatable         main_GEN_0015:0051H
case_2                                                                          			         Relocatable         main_GEN_0015:0054H
case_3                                                                          			         Relocatable         main_GEN_0015:0057H
case_4                                                                          			         Relocatable         main_GEN_0015:0069H
case_5                                                                          			         Relocatable         main_GEN_0015:006FH
case_6                                                                          			         Relocatable         main_GEN_0015:0075H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0015:002DH
else_1                                                                          			         Relocatable         main_GEN_0015:008CH
endif_0                                                                         			  Unused Relocatable        main_GEN_0015:002DH
endif_1                                                                         			  Unused Relocatable        main_GEN_0015:008CH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0015:0020H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0015:00BCH
for_end_2                                                                       			  Unused Relocatable        main_GEN_0015:00A5H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0015:00A3H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0015:00BBH
for_end_5                                                                       			  Unused Relocatable        main_GEN_0015:00B9H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0015:00A3H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0015:00B9H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0015:00BBH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0015:0018H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0015:0097H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0015:0094H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0015:00ADH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0015:00A8H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0015:0092H
label_end_92                                                                    			         Relocatable         main_GEN_0015:001FH
label_end_93                                                                    			         Relocatable         main_GEN_0015:00A2H
label_end_94                                                                    			         Relocatable         main_GEN_0015:00A4H
label_end_95                                                                    			         Relocatable         main_GEN_0015:00B8H
label_end_96                                                                    			         Relocatable         main_GEN_0015:00BAH
label_end_97                                                                    			         Relocatable         main_GEN_0015:00BBH
switch_1                                                                        			  Unused Relocatable        main_GEN_0015:0059H
switch_end_0                                                                    			         Relocatable         main_GEN_0015:0059H
switch_end_1                                                                    			         Relocatable         main_GEN_0015:007AH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0001H	 main_GEN_0006                           			 Y_OVLY                                  
0001H	 main_GEN_0007                           			 X_OVLY                                  
0001H	 main_GEN_0008                           			 X_OVLY                                  
0001H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0080H	 main_GEN_0011                           			 X_OVLY                                  
0021H	 main_GEN_0012                           			 X_OVLY                                  
0021H	 main_GEN_0013                           			 X_OVLY                                  
0001H	 main_GEN_0014                           			 X_OVLY                                  
00D2H	 main_GEN_0015                           			 CODE_OVLY                               
